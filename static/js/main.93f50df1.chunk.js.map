{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","name","value","label","placeholder","required","onChange","pattern","useState","Math","random","toFixed","slice","id","errorMessage","setErrorMessage","touched","setTouched","hasError","match","htmlFor","type","classNames","event","target","onBlur","NewMovie","onAdd","count","setCount","setName","setDescription","imageUrl","setImageUrl","setImdbUrl","setImdbId","checkInput","allInputReceived","trim","regexMatched","onSubmit","preventDefault","disabled","App","moviesFromServer","allMovies","setAllMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.93f50df1.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  placeholder?: string,\n  required?: boolean,\n  onChange?: (newValue: string) => void,\n};\n\nfunction getRandomDigits() {\n  return Math.random()\n    .toFixed(16)\n    .slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  placeholder = `Enter ${label}`,\n  required = false,\n  onChange = () => {},\n}) => {\n  // eslint-disable-next-line max-len\n  const pattern = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@,.\\w_]*)#?(?:[,.!/\\\\\\w]*))?)$/;\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n  const [errorMessage, setErrorMessage] = useState(`${label} is required`);\n  // To show errors only if the field was touched (onBlur)\n  const [touched, setTouched] = useState(false);\n  const hasError = () => {\n    if ((name === 'imgUrl' || name === 'imdbUrl') && value) {\n      return touched && required && !value.match(pattern);\n    }\n\n    return touched && required && !value;\n  };\n\n  const handleOnBlur = () => {\n    if ((name === 'imgUrl' || name === 'imdbUrl')\n    && value && !value.match(pattern)) {\n      setErrorMessage('Wrong URL input');\n    } else {\n      setErrorMessage(`${label} is required`);\n    }\n\n    setTouched(true);\n  };\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          type=\"text\"\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError(),\n          })}\n          placeholder={placeholder}\n          value={value}\n          onChange={event => onChange(event.target.value)}\n          onBlur={handleOnBlur}\n        />\n      </div>\n\n      {hasError() && (\n        <p className=\"help is-danger\">{errorMessage}</p>\n      )}\n    </div>\n  );\n};\n","import { useState } from 'react';\nimport { TextField } from '../TextField';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  onAdd: (movie: Movie) => void;\n}\n\nexport const NewMovie: React.FC<Props> = ({ onAdd }) => {\n  const [count, setCount] = useState(0);\n  const [name, setName] = useState('');\n  const [description, setDescription] = useState('');\n  const [imageUrl, setImageUrl] = useState('');\n  const [imdbUrl, setImdbUrl] = useState('');\n  const [imdbId, setImdbId] = useState('');\n\n  const checkInput = () => {\n    // eslint-disable-next-line max-len\n    const pattern = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@,.\\w_]*)#?(?:[,.!/\\\\\\w]*))?)$/;\n    const allInputReceived\n    = name.trim() && imageUrl.trim() && imdbUrl.trim() && imdbId.trim();\n    const regexMatched = imdbUrl.match(pattern) && imageUrl.match(pattern);\n\n    return allInputReceived && regexMatched;\n  };\n\n  const clear = () => {\n    setName('');\n    setDescription('');\n    setImageUrl('');\n    setImdbUrl('');\n    setImdbId('');\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    if (checkInput()) {\n      onAdd({\n        title: name,\n        description,\n        imgUrl: imageUrl,\n        imdbUrl,\n        imdbId,\n      });\n      clear();\n      setCount(count + 1);\n    }\n  };\n\n  return (\n    <form\n      className=\"NewMovie\"\n      key={count}\n      onSubmit={handleSubmit}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={name}\n        onChange={setName}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={description}\n        onChange={setDescription}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        value={imageUrl}\n        required\n        onChange={setImageUrl}\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        value={imdbUrl}\n        required\n        onChange={setImdbUrl}\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={imdbId}\n        required\n        onChange={setImdbId}\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={!checkInput()}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import './App.scss';\nimport { useState } from 'react';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\n\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [allMovies, setAllMovies] = useState(moviesFromServer);\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={allMovies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie\n          onAdd={(movie: Movie) => setAllMovies([...allMovies, movie])}\n        />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}